import XCTest

final class SafetyRingAppUITests: XCTestCase {
    
    var app: XCUIApplication!
    
    override func setUpWithError() throws {
        continueAfterFailure = false
        app = XCUIApplication()
        app.launch()
    }
    
    override func tearDownWithError() throws {
        app = nil
    }
    
    // MARK: - Launch Tests
    
    func testAppLaunch() throws {
        // VÃ©rifier que l'app se lance correctement
        XCTAssertTrue(app.waitForExistence(timeout: 5), "L'application doit se lancer")
        
        // VÃ©rifier les Ã©lÃ©ments principaux de l'interface
        XCTAssertTrue(app.staticTexts["SafetyRing"].exists, "Le titre principal doit Ãªtre visible")
        XCTAssertTrue(app.staticTexts["SystÃ¨me d'alerte d'urgence intelligent"].exists, "Le sous-titre doit Ãªtre visible")
    }
    
    // MARK: - Navigation Tests
    
    func testNavigationToSettings() throws {
        // Naviguer vers les paramÃ¨tres
        let settingsButton = app.buttons["ParamÃ¨tres"]
        XCTAssertTrue(settingsButton.exists, "Le bouton ParamÃ¨tres doit Ãªtre visible")
        
        settingsButton.tap()
        
        // VÃ©rifier que l'Ã©cran des paramÃ¨tres est affichÃ©
        XCTAssertTrue(app.navigationBars["ParamÃ¨tres"].exists, "L'Ã©cran des paramÃ¨tres doit Ãªtre affichÃ©")
        
        // Retourner Ã  l'Ã©cran principal
        app.navigationBars.buttons.element(boundBy: 0).tap()
        
        // VÃ©rifier le retour Ã  l'Ã©cran principal
        XCTAssertTrue(app.staticTexts["SafetyRing"].exists, "Retour Ã  l'Ã©cran principal")
    }
    
    // MARK: - Emergency Alert Tests
    
    func testEmergencyAlertButton() throws {
        // VÃ©rifier que le bouton d'alerte d'urgence existe
        let emergencyButton = app.buttons["ðŸš¨ ALERTE D'URGENCE"]
        XCTAssertTrue(emergencyButton.exists, "Le bouton d'alerte d'urgence doit Ãªtre visible")
        
        // VÃ©rifier que le bouton est activÃ©
        XCTAssertTrue(emergencyButton.isEnabled, "Le bouton d'alerte doit Ãªtre activÃ©")
    }
    
    func testEmergencyAlertCountdown() throws {
        // DÃ©clencher l'alerte d'urgence
        let emergencyButton = app.buttons["ðŸš¨ ALERTE D'URGENCE"]
        emergencyButton.tap()
        
        // VÃ©rifier que le compte Ã  rebours est affichÃ©
        let countdownText = app.staticTexts.containing(NSPredicate(format: "label CONTAINS 'secondes restantes'")).firstMatch
        XCTAssertTrue(countdownText.exists, "Le compte Ã  rebours doit Ãªtre affichÃ©")
        
        // VÃ©rifier que le bouton d'annulation est visible
        let cancelButton = app.buttons["Annuler l'alerte"]
        XCTAssertTrue(cancelButton.exists, "Le bouton d'annulation doit Ãªtre visible")
        
        // Annuler l'alerte
        cancelButton.tap()
        
        // VÃ©rifier le retour Ã  l'Ã©tat initial
        XCTAssertTrue(app.buttons["ðŸš¨ ALERTE D'URGENCE"].exists, "Retour au bouton d'alerte initial")
    }
    
    // MARK: - Template Selection Tests
    
    func testEmergencyTemplateSelection() throws {
        // Naviguer vers la sÃ©lection de templates
        let templateButton = app.buttons["SÃ©lectionner"]
        XCTAssertTrue(templateButton.exists, "Le bouton de sÃ©lection de templates doit Ãªtre visible")
        
        templateButton.tap()
        
        // VÃ©rifier que l'Ã©cran de sÃ©lection est affichÃ©
        XCTAssertTrue(app.navigationBars["SÃ©lectionner Template"].exists, "L'Ã©cran de sÃ©lection doit Ãªtre affichÃ©")
        
        // Retourner Ã  l'Ã©cran principal
        app.navigationBars.buttons.element(boundBy: 0).tap()
    }
    
    // MARK: - Recipient Management Tests
    
    func testRecipientAddition() throws {
        // Naviguer vers l'ajout de destinataires
        let addButton = app.buttons["Ajouter"]
        XCTAssertTrue(addButton.exists, "Le bouton d'ajout de destinataires doit Ãªtre visible")
        
        addButton.tap()
        
        // VÃ©rifier que l'Ã©cran d'Ã©dition est affichÃ©
        XCTAssertTrue(app.navigationBars["Ajouter Destinataire"].exists, "L'Ã©cran d'ajout doit Ãªtre affichÃ©")
        
        // Retourner Ã  l'Ã©cran principal
        app.navigationBars.buttons.element(boundBy: 0).tap()
    }
    
    // MARK: - Status Display Tests
    
    func testStatusCardsDisplay() throws {
        // VÃ©rifier que les cartes de statut sont affichÃ©es
        let bluetoothStatus = app.staticTexts.containing(NSPredicate(format: "label CONTAINS 'Bluetooth'")).firstMatch
        XCTAssertTrue(bluetoothStatus.exists, "Le statut Bluetooth doit Ãªtre affichÃ©")
        
        let networkStatus = app.staticTexts.containing(NSPredicate(format: "label CONTAINS 'RÃ©seau'")).firstMatch
        XCTAssertTrue(networkStatus.exists, "Le statut rÃ©seau doit Ãªtre affichÃ©")
        
        let locationStatus = app.staticTexts.containing(NSPredicate(format: "label CONTAINS 'Localisation'")).firstMatch
        XCTAssertTrue(locationStatus.exists, "Le statut de localisation doit Ãªtre affichÃ©")
    }
    
    // MARK: - Template Display Tests
    
    func testEmergencyTemplatesDisplay() throws {
        // VÃ©rifier que la section des templates est visible
        let templatesTitle = app.staticTexts["ðŸš¨ Templates d'urgence"]
        XCTAssertTrue(templatesTitle.exists, "Le titre des templates doit Ãªtre visible")
        
        // VÃ©rifier qu'au moins un template est affichÃ©
        let templateGrid = app.collectionViews.firstMatch
        XCTAssertTrue(templateGrid.exists, "La grille des templates doit Ãªtre visible")
    }
    
    // MARK: - Recipients Display Tests
    
    func testRecipientsSectionDisplay() throws {
        // VÃ©rifier que la section des destinataires est visible
        let recipientsTitle = app.staticTexts["ðŸ“± Destinataires"]
        XCTAssertTrue(recipientsTitle.exists, "Le titre des destinataires doit Ãªtre visible")
        
        // VÃ©rifier le bouton d'ajout
        let addButton = app.buttons["Ajouter"]
        XCTAssertTrue(addButton.exists, "Le bouton d'ajout doit Ãªtre visible")
    }
    
    // MARK: - Alert Logs Display Tests
    
    func testAlertLogsSectionDisplay() throws {
        // VÃ©rifier que la section des logs est visible
        let logsTitle = app.staticTexts["ðŸ“‹ Historique des alertes"]
        XCTAssertTrue(logsTitle.exists, "Le titre des logs doit Ãªtre visible")
    }
    
    // MARK: - Settings Integration Tests
    
    func testSettingsAccessibility() throws {
        // Naviguer vers les paramÃ¨tres
        app.buttons["ParamÃ¨tres"].tap()
        
        // VÃ©rifier les sections principales des paramÃ¨tres
        XCTAssertTrue(app.staticTexts["GÃ©nÃ©ral"].exists, "La section GÃ©nÃ©ral doit Ãªtre visible")
        XCTAssertTrue(app.staticTexts["Alertes"].exists, "La section Alertes doit Ãªtre visible")
        XCTAssertTrue(app.staticTexts["Messagerie"].exists, "La section Messagerie doit Ãªtre visible")
        
        // Retourner Ã  l'Ã©cran principal
        app.navigationBars.buttons.element(boundBy: 0).tap()
    }
    
    // MARK: - WhatsApp Scraping Tests
    
    func testWhatsAppScrapingSection() throws {
        // Naviguer vers les paramÃ¨tres
        app.buttons["ParamÃ¨tres"].tap()
        
        // VÃ©rifier la section WhatsApp scraping
        let scrapingTitle = app.staticTexts.containing(NSPredicate(format: "label CONTAINS 'WhatsApp'")).firstMatch
        XCTAssertTrue(scrapingTitle.exists, "La section WhatsApp scraping doit Ãªtre visible")
        
        // Retourner Ã  l'Ã©cran principal
        app.navigationBars.buttons.element(boundBy: 0).tap()
    }
    
    // MARK: - Performance Tests
    
    func testAppLaunchPerformance() throws {
        measure(metrics: [XCTApplicationLaunchMetric()]) {
            XCUIApplication().launch()
        }
    }
    
    func testNavigationPerformance() throws {
        measure {
            // Navigation vers les paramÃ¨tres et retour
            app.buttons["ParamÃ¨tres"].tap()
            app.navigationBars.buttons.element(boundBy: 0).tap()
        }
    }
    
    // MARK: - Accessibility Tests
    
    func testAccessibilityLabels() throws {
        // VÃ©rifier que les Ã©lÃ©ments principaux ont des labels d'accessibilitÃ©
        let emergencyButton = app.buttons["ðŸš¨ ALERTE D'URGENCE"]
        XCTAssertTrue(emergencyButton.exists, "Le bouton d'alerte doit avoir un label d'accessibilitÃ©")
        
        let settingsButton = app.buttons["ParamÃ¨tres"]
        XCTAssertTrue(settingsButton.exists, "Le bouton des paramÃ¨tres doit avoir un label d'accessibilitÃ©")
    }
    
    // MARK: - Dark Mode Tests
    
    func testDarkModeCompatibility() throws {
        // Note: Ces tests nÃ©cessitent un environnement de test avec support du mode sombre
        // VÃ©rifier que l'interface reste lisible en mode sombre
        XCTAssertTrue(app.staticTexts["SafetyRing"].exists, "Le titre doit rester visible en mode sombre")
    }
    
    // MARK: - Orientation Tests
    
    func testOrientationChanges() throws {
        // Note: Ces tests nÃ©cessitent un environnement de test avec support des rotations
        // VÃ©rifier que l'interface s'adapte aux changements d'orientation
        XCTAssertTrue(app.staticTexts["SafetyRing"].exists, "Le titre doit rester visible aprÃ¨s rotation")
    }
    
    // MARK: - Error Handling Tests
    
    func testNetworkErrorHandling() throws {
        // Simuler une erreur rÃ©seau (nÃ©cessite un environnement de test spÃ©cial)
        // VÃ©rifier que l'interface affiche correctement les erreurs
        XCTAssertTrue(app.staticTexts["SafetyRing"].exists, "L'interface doit rester stable en cas d'erreur")
    }
    
    // MARK: - Localization Tests
    
    func testLocalizationSupport() throws {
        // Note: Ces tests nÃ©cessitent un environnement de test avec diffÃ©rentes langues
        // VÃ©rifier que l'interface s'adapte aux changements de langue
        XCTAssertTrue(app.staticTexts["SafetyRing"].exists, "L'interface doit supporter la localisation")
    }
}

// MARK: - Test Helpers

extension SafetyRingAppUITests {
    
    func waitForElementToAppear(_ element: XCUIElement, timeout: TimeInterval = 5) -> Bool {
        return element.waitForExistence(timeout: timeout)
    }
    
    func tapIfExists(_ element: XCUIElement) {
        if element.exists {
            element.tap()
        }
    }
    
    func scrollToElement(_ element: XCUIElement, in scrollView: XCUIElement) {
        while !element.isHittable {
            scrollView.swipeUp()
        }
    }
}
